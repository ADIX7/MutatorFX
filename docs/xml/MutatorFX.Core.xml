<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MutatorFX.Core</name>
    </assembly>
    <members>
        <member name="T:MutatorFX.Coding.GeneralFluentExtensions">
            <summary>
            Globally usable extensions for creating fluent style APIs.
            </summary>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.Do``1(``0,System.Action{``0})">
            <summary>
            Execute an action with the given object as parameter, then return the object.
            Useful for creating fluent APIs and shortening two-liners.
            Note that the input object <paramref name="obj"/> can only be mutated by the provided <paramref name="action"/> if it is a reference type.
            </summary>
            <typeparam name="T">The type of the given object <paramref name="obj"/>. Should be inferred.</typeparam>
            <param name="obj">The object to execute the given action on. Can be null.</param>
            <param name="action">The action to execute on the object <paramref name="obj"/>. Usually a method with 
            no return value or with a return value that should be ignored.</param>
            <returns>The object itself after the invokation of the action.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.DoAsync``1(``0,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            The asynchronous pair of <see cref="M:MutatorFX.Coding.GeneralFluentExtensions.Do``1(``0,System.Action{``0})"/>.
            Useful for creating fluent APIs and shortening two-liners.
            Note that the input object <paramref name="obj"/> can only be mutated by the provided <paramref name="action"/> if it is a reference type.
            </summary>
            <typeparam name="T">The type of the given object <paramref name="obj"/>. Should be inferred.</typeparam>
            <param name="obj">The object to execute the given action on. Can be null.</param>
            <param name="action">The (generally) async function to execute on the object <paramref name="obj"/>. 
            If the task has a return value, it is ignored.</param>
            <returns>The object itself after the invokation and awaiting of the asynchronous function.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.Branch``1(``0,System.Func{``0,System.Boolean},System.Action{``0},System.Action{``0})">
            <summary>
            Execute an action with the given object as parameter if a precondition succeeds, then return the object.
            Optionally execute another action, like an if-else statement.
            Useful for creating fluent APIs and shortening two-liners.
            Note that the input object <paramref name="obj"/> can only be mutated by the provided actions if it is a reference type.
            </summary>
            <typeparam name="T">The type of the given object <paramref name="obj"/>. Should be inferred.</typeparam>
            <param name="obj">The object to execute the given action on. Can be null.</param>
            <param name="predicate">The precondition to check.</param>
            <param name="actionIf">The action to execute on the object <paramref name="obj"/> when the predicate resolves to true.</param>
            <param name="actionElse">The optional action to execute on the object <paramref name="obj"/> when the predicate resolves to false.</param>
            <returns>The object itself after the invokation of either or none of the actions.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.BranchAsync``1(``0,System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Func{``0,System.Threading.Tasks.Task},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            The async pair of <see cref="M:MutatorFX.Coding.GeneralFluentExtensions.Branch``1(``0,System.Func{``0,System.Boolean},System.Action{``0},System.Action{``0})"/>.
            Execute an action with the given object as parameter if a precondition succeeds, then return the object.
            Optionally execute another action, like an if-else statement.
            Useful for creating fluent APIs and shortening two-liners.
            Note that the input object <paramref name="obj"/> can only be mutated by the provided actions if it is a reference type.
            </summary>
            <typeparam name="T">The type of the given object <paramref name="obj"/>. Should be inferred.</typeparam>
            <param name="obj">The object to execute the given action on. Can be null.</param>
            <param name="predicate">The precondition to check.</param>
            <param name="actionIf">The action to execute on the object <paramref name="obj"/> when the predicate resolves to true.</param>
            <param name="actionElse">The optional action to execute on the object <paramref name="obj"/> when the predicate resolves to false.</param>
            <returns>The object itself after the invokation of either or none of the actions.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.Branch``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>Branch a statement based on the current value.</summary>
            <typeparam name="T">The type of the given object <paramref name="obj"/>. Should be inferred.</typeparam>
            <typeparam name="TResult">The type of the return value. In most cases, should be inferred.</typeparam>
            <param name="obj">The object to base the branching on.</param>
            <param name="predicate">The value to check for branching.</param>
            <param name="funcIf">The function to execute when precondition succeeds.</param>
            <param name="funcElse">The function to execute when precondition fails. Optional.</param>
            <returns>The result of the appropriate invokation. If no else branch was specified and precondition fails, the default of type <typeparamref name="TResult"/> is returned.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.BranchAsync``2(``0,System.Func{``0,System.Threading.Tasks.Task{System.Boolean}},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            The async pair of <see cref="M:MutatorFX.Coding.GeneralFluentExtensions.Branch``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``1})"/>.
            Branch a statement based on the current value.
            </summary>
            <typeparam name="T">The type of the given object <paramref name="obj"/>. Should be inferred.</typeparam>
            <typeparam name="TResult">The type of the return value. In most cases, should be inferred.</typeparam>
            <param name="obj">The object to base the branching on.</param>
            <param name="predicate">The value to check for branching.</param>
            <param name="funcIf">The function to execute when precondition succeeds.</param>
            <param name="funcElse">The function to execute when precondition fails. Optional.</param>
            <returns>The result of the appropriate invokation. If no else branch was specified and precondition fails, the default of type <typeparamref name="TResult"/> is returned.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.Pipe``2(``0,System.Func{``0,``1})">
            <summary>
            Execute a function with the given object as parameter, and return the result.
            Useful to create fluent APIs and shorten code by closing on the object <paramref name="obj"/>.
            Instead of a simple invocation, you can create a closure on the object <paramref name="obj"/> and reuse the variable in the <paramref name="function"/> scope.
            Note that the input object <paramref name="obj"/> can only be mutated by the provided <paramref name="function"/> if it is a reference type.
            </summary>
            <typeparam name="T">The type of the object <paramref name="obj"/>. Should be inferred.</typeparam>
            <typeparam name="TResult">The type of the invokation result of <paramref name="function"/>. Should be inferred.</typeparam>
            <param name="obj">The object to call the provided function <paramref name="function"/> on. If the object is not a reference type, the input won't be mutated.</param>
            <param name="function">The function to call with the parameter <paramref name="obj"/> and return the resulting value of.</param>
            <returns>Returns the result of the function invokation of <paramref name="function"/> with the parameter <paramref name="obj"/>.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.PipeAsync``2(``0,System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            The asynchronous pair of <see cref="M:MutatorFX.Coding.GeneralFluentExtensions.Pipe``2(``0,System.Func{``0,``1})"/>.
            /// Execute and await an asynchronous function with the given object as parameter, and return the result.
            Useful to create fluent APIs and shorten code by closing on the object <paramref name="obj"/>.
            Instead of a simple invocation, you can create a closure on the object <paramref name="obj"/> and reuse the variable in the <paramref name="function"/> scope.
            Note that the input object <paramref name="obj"/> can only be mutated by the provided <paramref name="function"/> if it is a reference type.
            </summary>
            <typeparam name="T">The type of the object <paramref name="obj"/>. Should be inferred.</typeparam>
            <typeparam name="TResult">The type of the invokation result of <paramref name="function"/>. Should be inferred.</typeparam>
            <param name="obj">The object to call the provided function <paramref name="function"/> on.</param>
            <param name="function">The function to call with the parameter <paramref name="obj"/> and return the resulting value of.</param>
            <returns>Returns the result of the function invokation of <paramref name="function"/> with the parameter <paramref name="obj"/>.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Execute the provided <paramref name="action"/> for all elements in the <paramref name="source"/> collection.
            Useful to create fluent APIs and shorten code by replacing foreach loops. The action is executed and the element is returned for each element.
            Used instead of <see cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/> when the <paramref name="source"/> should not lazily be enumerated.
            Note that the input objects in <paramref name="source"/> can only be mutated by the provided <paramref name="action"/> if <typeparamref name="T"/> is a reference type.
            </summary>
            <typeparam name="T">The type of the collection elements. Should be inferred.</typeparam>
            <param name="source">The collection to enumerate and execute the provided <paramref name="action"/> on. Can not be null.</param>
            <param name="action">The action to execute on the <paramref name="source"/> collection. Can not be null.</param>
            <returns>Returns the elements of <paramref name="source"/>, after each has been invoked on <paramref name="action"/>.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Boolean)">
            <summary>
            Execute the provided <paramref name="action"/> for all elements in the <paramref name="source"/> collection.
            Useful to create fluent APIs and shorten code by replacing foreach loops. The action is executed and the element is returned for each element.
            Used instead of <see cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/> and the <paramref name="source"/> can optionally be lazily enumerated.
            Note that the input objects in <paramref name="source"/> can only be mutated by the provided <paramref name="action"/> if <typeparamref name="T"/> is a reference type.
            </summary>
            <typeparam name="T">The type of the collection elements. Should be inferred.</typeparam>
            <param name="source">The collection to enumerate and execute the provided <paramref name="action"/> on. Can not be null.</param>
            <param name="action">The action to execute on the <paramref name="source"/> collection. Can not be null.</param>
            <param name="lazy">Using lazy evaluation executes the action once as the <paramref name="source"/> is being enumerated, otherwise a full enumeration happens and each element is called on the <paramref name="action"/>.</param>
            <returns>Returns the elements of <paramref name="source"/> one by one after being invoked on <paramref name="action"/>, or after all has been invoked depending on the value of <paramref name="lazy"/>.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.ForInternal``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Internal helper method for the method <see cref="M:MutatorFX.Coding.GeneralFluentExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})"/>. Used for reducing the number of parameter null checks.
            Note that the input objects in <paramref name="source"/> can only be mutated by the provided <paramref name="action"/> if <typeparamref name="T"/> is a reference type.
            </summary>
            <typeparam name="T">The type of the collection elements. Should be inferred.</typeparam>
            <param name="source">The collection to enumerate and execute the provided <paramref name="action"/> on. Can not be null, but not checked.</param>
            <param name="action">The action to execute on the <paramref name="source"/> collection. Can not be null, but not checked.</param>
            <returns>The parameter <paramref name="source"/> after invoking <paramref name="action"/> with its elements. Evaluated lazily.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.Using``1(``0,System.Action{``0})">
            <summary>
            Invokes a synchronous action on a disposable object. The object will be used in a using block.
            </summary>
            <typeparam name="T">The type of the disposable object to use. Should be inferred.</typeparam>
            <param name="disposable">The object to use. Will be disposed of by the end of the call. Should not be null.</param>
            <param name="action">The action to invoke on the disposable object in a using block. Should not be null.</param>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.Using``2(``0,System.Func{``0,``1})">
            <summary>
            Invokes a synchronous function on a disposable object. The object will be used in a using block.
            </summary>
            <typeparam name="T">The type of the disposable object to use. Should be inferred.</typeparam>
            <typeparam name="TResult">The result type of the <paramref name="function"/> call on the object. Should be inferred.</typeparam>
            <param name="disposable">The object to use. Will be disposed of by the end of the call. Should not be null.</param>
            <param name="function">The action to invoke on the disposable object in a using block. Should not be null.</param>
            <returns>The result of calling the <paramref name="function"/> on the <paramref name="disposable"/> object.
            When the object is returned to the caller, the disposable object is disposed of.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.UsingAsync``1(``0,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Invokes an asynchronous action on a disposable object. The object will be used in a using block.
            </summary>
            <typeparam name="T">The type of the disposable object to use. Should be inferred.</typeparam>
            <param name="disposable">The object to use. Will be disposed of by the end of the call. Should not be null.</param>
            <param name="function">The action to invoke on the disposable object in a using block. Should not be null.</param>
            <returns>When control is returned to the caller, the disposable object is disposed of and the task returned by <paramref name="function"/> awaited.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.UsingAsync``2(``0,System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Invokes an asynchronous function on a disposable object. The object will be used in a using block.
            </summary>
            <typeparam name="T">The type of the disposable object to use. Should be inferred.</typeparam>
            <typeparam name="TResult">The result type of the asynchronous <paramref name="function"/> call on the object. Should be inferred.</typeparam>
            <param name="disposable">The object to use. Will be disposed of by the end of the call. Should not be null.</param>
            <param name="function">The action to invoke on the disposable object in a using block. Should not be null.</param>
            <returns>When control is returned to the caller, the disposable object is disposed of and the result of the task returned by <paramref name="function"/> is returned.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.DoAwait``1(``0,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Awaits an asynchrounous operation on an object and returns the object. Uses <see cref="M:System.Threading.Tasks.Task.GetAwaiter"/> and <see cref="M:System.Runtime.CompilerServices.TaskAwaiter.GetResult"/>.
            </summary>
            <typeparam name="T">The type of the object to use. Should be inferred.</typeparam>
            <param name="obj">The object to use. Should not be null.</param>
            <param name="func">The async function to execute. Should not be null.</param>
            <returns>The object <paramref name="obj"/> after the async function <paramref name="func"/> is executed and awaited. 
            If type <typeparamref name="T"/> is not a reference type, the input will be returned and won't be mutated.</returns>
        </member>
        <member name="M:MutatorFX.Coding.GeneralFluentExtensions.PipeAwait``2(``0,System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Awaits an asynchrounous operation on an object and returns the result of the operation. Uses <see cref="M:System.Threading.Tasks.Task.GetAwaiter"/> and <see cref="M:System.Runtime.CompilerServices.TaskAwaiter.GetResult"/>.
            </summary>
            <typeparam name="T">The type of the object to use. Should be inferred.</typeparam>
            <typeparam name="TResult">The type of result of the function <paramref name="func"/>. Should be inferred.</typeparam>
            <param name="obj">The object to use Should not be null.</param>
            <param name="func">The async function to execute. Should not be null.</param>
            <returns>The result of the async function <paramref name="func"/>.</returns>
        </member>
        <member name="T:MutatorFX.ExceptionHandling.Assertions">
            <summary>
            This class contains static helper methods to validate simple assertions for generating Exceptions like
            <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentOutOfRangeException"/>.
            It is suggested that you use the assertions as follows:<para></para>
            <code>
            using static MutatorFX.ExceptionHandling.Assertions;
            
            void Method(string param1, object param2)
            {
                EnsureNoneNull(new { param1, param2 });
            }
            
            void Method2(string parameter)
            {
                EnsureNotNull(parameter, nameof(parameter));
            }
            </code>
            </summary>
        </member>
        <member name="M:MutatorFX.ExceptionHandling.Assertions.EnsureNotNull``1(``0)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the passed parameter was null.
            Consider using the <see cref="M:MutatorFX.ExceptionHandling.Assertions.EnsureNotNull``1(``0,System.String)"/> overload for named parameters.
            </summary>
            <param name="parameter">The parameter which should not be null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the given parameter object is null.</exception>
            <returns>The parameter if it was not null, throws an <see cref="T:System.ArgumentNullException"/> otherwise.</returns>
        </member>
        <member name="M:MutatorFX.ExceptionHandling.Assertions.EnsureNotNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the passed parameter was null.
            </summary>
            <param name="parameter">The parameter which should not be null.</param>
            <param name="parameterName">The (outer) name of the parameter. Should not be null :)</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the given parameter object is null.</exception>
            <returns>The parameter if it was not null, throws an <see cref="T:System.ArgumentNullException"/> otherwise.</returns>
        </member>
        <member name="M:MutatorFX.ExceptionHandling.Assertions.EnsureNotNull``1(``0,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the passed parameter was null.
            </summary>
            <param name="parameter">The parameter which should not be null.</param>
            <param name="parameterName">The (outer) name of the parameter. Should not be null :)</param>
            <param name="message">The message to set on the resulting <see cref="T:System.ArgumentNullException"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the given parameter object is null.</exception>
            <returns>The parameter if it was not null, throws an <see cref="T:System.ArgumentNullException"/> otherwise.</returns>
        </member>
        <member name="M:MutatorFX.ExceptionHandling.Assertions.EnsureNoneNull``1(``0)">
            <summary>
            Throws an <see cref="T:System.AggregateException"/> if any of the passed <paramref name="parameters"/> object's properties are null.
            Should be used with an anonymous object containing
            Usage:<para></para>
            <code>
            using static MutatorFX.ExceptionHandling.Assertions;
            
            void Method(string param1, object param2)
            {
                EnsureNoneNull(new { param1, param2 });
            }
            </code>
            </summary>
            <param name="parameters">The object containing the parameters in its properties to check for null. 
            Should be an anonymous object constructed inline from the names of the parameters.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the given parameters object is null.</exception>
            <exception cref="T:System.AggregateException">Thrown when any of the given parameters object's properties are null. 
            Contains <see cref="T:System.ArgumentNullException"/> instances which show the invalid parameters.</exception>
        </member>
        <member name="T:MutatorFX.ExceptionHandling.ExceptionHandlingExtensions">
            <summary>
            Contains helper methods to use when throwing and handling <see cref="T:System.Exception"/>s.
            </summary>
        </member>
        <member name="M:MutatorFX.ExceptionHandling.ExceptionHandlingExtensions.WithData``1(``0,System.Object)">
            <summary>
            Appends the <paramref name="data"/> object's properties to the <paramref name="exception"/>'s <see cref="P:System.Exception.Data"/> dictionary.
            </summary>
            <typeparam name="TException">The type of the <see cref="T:System.Exception"/> to extend. Should be inferred by using as an extension method.</typeparam>
            <param name="exception">The exception to append the data to. Can be null, in this case null will be returned.</param>
            <param name="data">The data to append to the exception. Can be null, in this case the exception object will be returned as is.</param>
            <returns>The <paramref name="exception"/> with data appended from the <paramref name="data"/> object's properties to its <see cref="P:System.Exception.Data"/> property. 
            If the <paramref name="data"/> was null, the <paramref name="exception"/> is returned as is. 
            If the <paramref name="exception"/> was null, null will be returned.</returns>
        </member>
        <member name="T:MutatorFX.Reflection.TypeReflectionExtensions">
            <summary>
            Globally usable helper extensions, useful when using reflection and <see cref="T:System.Type"/> objects.
            </summary>
        </member>
        <member name="M:MutatorFX.Reflection.TypeReflectionExtensions.GetPropertyChain(System.Type,System.String,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets the first available property chain that matches the start of the given text. The text should be the concatenation of the property names. 
            In case of multiple matches, the first match is selected by ordering the properties by ascending order of the length of their names.
            In case of no matches are found, an <see cref="T:System.InvalidOperationException"/> is thrown.
            </summary>
            <remarks> This method uses recursion, and calls <see cref="M:MutatorFX.Reflection.TypeReflectionExtensions.GetPropertyChains(System.Type,System.String,System.Nullable{System.Reflection.BindingFlags})"/> internally.</remarks>
            <param name="type">The type that should contain the properties described by the <paramref name="text"/>.</param>
            <param name="text">The string containing the exact names of the chained properties (without separators).</param>
            <param name="bindingFlags">The <seealso cref="T:System.Reflection.BindingFlags"/> to use when looking for matching properties.</param>
            <returns>The property chain in order.</returns>
        </member>
        <member name="M:MutatorFX.Reflection.TypeReflectionExtensions.GetPropertyChains(System.Type,System.String,System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Gets all the available property chains that matches the given text. The text should be the concatenation of the property names. 
            The matches are ordered by ascending order of the length of their propertynames.
            </summary>
            <param name="type">The type that should contain the properties described by the <paramref name="text"/>.</param>
            <param name="text">The string containing the exact names of the chained properties (without separators).</param>
            <param name="bindingFlags">The <seealso cref="T:System.Reflection.BindingFlags"/> to use when looking for matching properties.</param>
            <returns>The matching property chains.</returns>
        </member>
    </members>
</doc>
